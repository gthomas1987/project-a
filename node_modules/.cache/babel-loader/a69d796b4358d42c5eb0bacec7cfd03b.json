{"ast":null,"code":"import _slicedToArray from \"/Users/george/Documents/George/project-a/project-a/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/george/Documents/George/project-a/project-a/src/components/AlgoPNLChart.js\";\nimport React, { useEffect, useState } from 'react'; //import ApexCharts from 'apexcharts'\n\nimport Chart from \"react-apexcharts\";\n\nfunction AlgoPNLChart(props) {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        options = _useState2[0],\n        setOptions = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        series = _useState4[0],\n        setSeries = _useState4[1];\n\n  useEffect(() => {\n    setOptions({\n      chart: {\n        id: \"basic-line\",\n        type: \"line\"\n      },\n      annotations: {\n        xaxis: [{\n          // in a datetime series, the x value should be a timestamp, just like it is generated below\n          x: 20191222,\n          strokeDashArray: 0,\n          borderColor: \"#775DD0\",\n          label: {\n            borderColor: \"#775DD0\",\n            style: {\n              color: \"#fff\",\n              background: \"#775DD0\"\n            },\n            text: \"X Axis Anno Vertical\"\n          }\n        }, {\n          x: \"20191222\",\n          borderColor: \"#FEB019\",\n          label: {\n            borderColor: \"#FEB019\",\n            style: {\n              color: \"#fff\",\n              background: \"#FEB019\"\n            },\n            orientation: \"horizontal\",\n            text: \"X Axis Anno Horizonal\"\n          }\n        }],\n        points: [{\n          x: 20191222,\n          y: 51000,\n          marker: {\n            size: 8,\n            fillColor: '#fff',\n            strokeColor: 'red',\n            radius: 2,\n            cssClass: 'apexcharts-custom-class'\n          },\n          label: {\n            borderColor: '#FF4560',\n            offsetY: 0,\n            style: {\n              color: '#fff',\n              background: '#FF4560'\n            },\n            text: 'Point Annotation'\n          }\n        }]\n      },\n      xaxis: {\n        categories: props.x,\n        type: \"datetime\"\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: \"straight\"\n      }\n    });\n    setSeries([{\n      name: \"PNL\",\n      data: props.y\n    }]);\n  }, [props.x, props.y]);\n  return React.createElement(\"div\", {\n    className: \"app\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"mixed-chart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(Chart, {\n    options: options,\n    series: series,\n    type: \"line\",\n    width: \"2000\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }))));\n}\n\nexport default AlgoPNLChart;","map":{"version":3,"sources":["/Users/george/Documents/George/project-a/project-a/src/components/AlgoPNLChart.js"],"names":["React","useEffect","useState","Chart","AlgoPNLChart","props","options","setOptions","series","setSeries","chart","id","type","annotations","xaxis","x","strokeDashArray","borderColor","label","style","color","background","text","orientation","points","y","marker","size","fillColor","strokeColor","radius","cssClass","offsetY","categories","dataLabels","enabled","stroke","curve","name","data"],"mappings":"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","sourcesContent":["import React,{useEffect,useState} from 'react';\n//import ApexCharts from 'apexcharts'\n\nimport Chart from \"react-apexcharts\";\n\nfunction AlgoPNLChart(props){\n\n  const [options,setOptions] = useState({});\n  const [series,setSeries] = useState([]);\n\n  useEffect(()=>{\n    setOptions({\n        chart: {\n          id: \"basic-line\",\n          type: \"line\"\n        },\n        annotations: {\n          xaxis: [\n            {\n              // in a datetime series, the x value should be a timestamp, just like it is generated below\n              x: 20191222,\n              strokeDashArray: 0,\n              borderColor: \"#775DD0\",\n              label: {\n                borderColor: \"#775DD0\",\n                style: {\n                  color: \"#fff\",\n                  background: \"#775DD0\"\n                },\n                text: \"X Axis Anno Vertical\"\n              }\n            },\n            {\n              x: \"20191222\",\n              borderColor: \"#FEB019\",\n              label: {\n                borderColor: \"#FEB019\",\n                style: {\n                  color: \"#fff\",\n                  background: \"#FEB019\"\n                },\n                orientation: \"horizontal\",\n                text: \"X Axis Anno Horizonal\"\n              }\n            }\n          ],\n          points: [{\n            x: 20191222,\n            y: 51000,\n            marker: {\n              size: 8,\n              fillColor: '#fff',\n              strokeColor: 'red',\n              radius: 2,\n              cssClass: 'apexcharts-custom-class'\n            },\n            label: {\n              borderColor: '#FF4560',\n              offsetY: 0,\n              style: {\n                color: '#fff',\n                background: '#FF4560',\n              },\n\n              text: 'Point Annotation',\n            }\n          }]\n        },\n        xaxis:{\n          categories:props.x,\n          type: \"datetime\"\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: \"straight\"\n        }\n\n      })\n      setSeries([\n        {\n          name: \"PNL\",\n          data: props.y\n        }])\n  },[props.x,props.y]);\n\n\n  \n    return (\n      <div className=\"app\">\n        <div className=\"row\">\n          <div className=\"mixed-chart\">\n            <Chart\n              options={options}\n              series={series}\n              type=\"line\"\n              width=\"2000\"\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n\nexport default AlgoPNLChart;\n"]},"metadata":{},"sourceType":"module"}