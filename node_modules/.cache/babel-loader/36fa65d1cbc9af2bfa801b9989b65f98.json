{"ast":null,"code":"import _slicedToArray from\"/Users/george/Documents/George/project-a/project-a/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{Modal,Button,Form,Table,Card,Accordion}from'react-bootstrap';function AlgoDetailsModal(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),show=_useState2[0],setShow=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),positions=_useState4[0],setPositions=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),trades=_useState6[0],setTrades=_useState6[1];var handleClose=function handleClose(){return setShow(false);};var handleShow=function handleShow(){return setShow(true);};useEffect(function(){var data={\"algoname\":props.name};fetch('http://localhost:5000/getalgodetails',{method:'POST',// or 'PUT'\nbody:JSON.stringify(data),// data can be `string` or {object}!\nheaders:{'Content-Type':'application/json'}}).then(function(response){return response.json();}).then(function(data){console.log(data);console.log(data.trades);setPositions(data.positions);setTrades(data.trades);}).catch(function(error){return console.log(error);});},[props.name]);return React.createElement(React.Fragment,null,React.createElement(Button,{variant:\"primary\",onClick:handleShow},\"Details\"),React.createElement(Form,null,React.createElement(Modal,{size:\"lg\",show:show,onHide:handleClose},React.createElement(Modal.Header,{closeButton:true},React.createElement(Modal.Title,null,props.name)),React.createElement(Modal.Body,null,React.createElement(Accordion,{defaultActiveKey:\"0\"},React.createElement(Card,null,React.createElement(Card.Header,null,React.createElement(Accordion.Toggle,{as:Button,variant:\"link\",eventKey:\"0\"},\"Positions\")),React.createElement(Accordion.Collapse,{eventKey:\"0\"},React.createElement(Card.Body,null,React.createElement(Table,{striped:true,bordered:true,hover:true},React.createElement(\"thead\",null,React.createElement(\"tr\",null,React.createElement(\"th\",null,\"Security\"),React.createElement(\"th\",null,\"Symbol\"),React.createElement(\"th\",null,\"Exchange\"),React.createElement(\"th\",null,\"Currency\"),React.createElement(\"th\",null,\"Position\"),React.createElement(\"th\",null,\"Avg Cost\"),React.createElement(\"th\",null,\"Current Px\"),React.createElement(\"th\",null,\"Profit/Loss\"))),React.createElement(\"tbody\",null,positions.map(function(item,key){return React.createElement(\"tr\",{key:key},React.createElement(\"td\",null,item.security),React.createElement(\"td\",null,item.symbol),React.createElement(\"td\",null,item.exchange),React.createElement(\"td\",null,item.ccy),React.createElement(\"td\",null,item.amount),React.createElement(\"td\",null,item.avgcost),React.createElement(\"td\",null,item.currentprice),React.createElement(\"td\",null,item.pnl));})))))),React.createElement(Card,null,React.createElement(Card.Header,null,React.createElement(Accordion.Toggle,{as:Button,variant:\"link\",eventKey:\"1\"},\"Trades\")),React.createElement(Accordion.Collapse,{eventKey:\"1\"},React.createElement(Card.Body,null,React.createElement(Table,{striped:true,bordered:true,hover:true},React.createElement(\"thead\",null,React.createElement(\"tr\",null,React.createElement(\"th\",null,\"Security\"),React.createElement(\"th\",null,\"Symbol\"),React.createElement(\"th\",null,\"Exchange\"),React.createElement(\"th\",null,\"Currency\"),React.createElement(\"th\",null,\"Size\"),React.createElement(\"th\",null,\"Direction\"),React.createElement(\"th\",null,\"Price\"),React.createElement(\"th\",null,\"Trade Time\"))),React.createElement(\"tbody\",null,trades.map(function(item,key){return React.createElement(\"tr\",{key:key},React.createElement(\"td\",null,item.security),React.createElement(\"td\",null,item.symbol),React.createElement(\"td\",null,item.exchange),React.createElement(\"td\",null,item.ccy),React.createElement(\"td\",null,item.size),React.createElement(\"td\",null,item.direction),React.createElement(\"td\",null,item.tradedprice),React.createElement(\"td\",null,item.time));})))))))),React.createElement(Modal.Footer,null,React.createElement(Button,{variant:\"secondary\",onClick:handleClose},\"Close\")))));}export default AlgoDetailsModal;","map":{"version":3,"sources":["/Users/george/Documents/George/project-a/project-a/src/components/AlgoDetailsModal.js"],"names":["React","useState","useEffect","Modal","Button","Form","Table","Card","Accordion","AlgoDetailsModal","props","show","setShow","positions","setPositions","trades","setTrades","handleClose","handleShow","data","name","fetch","method","body","JSON","stringify","headers","then","response","json","console","log","catch","error","map","item","key","security","symbol","exchange","ccy","amount","avgcost","currentprice","pnl","size","direction","tradedprice","time"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport {Modal,Button,Form,Table,Card,Accordion} from 'react-bootstrap'\n\nfunction AlgoDetailsModal(props) {\n  \n  const [show, setShow] = useState(false);\n  const [positions, setPositions] = useState([]);\n  const [trades, setTrades] = useState([]);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n\n  useEffect(()=>{\n    \n    const data = {\"algoname\":props.name}\n    fetch('http://localhost:5000/getalgodetails', {\n        method: 'POST', // or 'PUT'\n        body: JSON.stringify(data), // data can be `string` or {object}!\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      .then(response=>response.json())\n      .then(data=>{\n        console.log(data)\n        console.log(data.trades)\n        setPositions(data.positions)\n        setTrades(data.trades)\n      })\n      .catch(error=>console.log(error));\n  },[props.name]);\n  \n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={handleShow}>\n        Details\n      </Button>\n      <Form>\n      <Modal size=\"lg\" show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>{props.name}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n        <Accordion defaultActiveKey=\"0\">\n          <Card>\n            <Card.Header>\n              \n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                Positions\n              </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"0\">\n              <Card.Body>\n              <Table striped bordered hover>\n                <thead>\n                  <tr>\n                    <th>Security</th>\n                    <th>Symbol</th>\n                    <th>Exchange</th>\n                    <th>Currency</th>\n                    <th>Position</th>\n                    <th>Avg Cost</th>\n                    <th>Current Px</th>\n                    <th>Profit/Loss</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  \n                    {positions.map((item,key)=>(\n                      <tr key ={key}>\n                        <td>{item.security}</td>\n                        <td>{item.symbol}</td>\n                        <td>{item.exchange}</td>\n                        <td>{item.ccy}</td>\n                        <td>{item.amount}</td>\n                        <td>{item.avgcost}</td>\n                        <td>{item.currentprice}</td>\n                        <td>{item.pnl}</td>\n                      </tr>\n                      ))}\n                  \n                </tbody>\n              </Table>\n                \n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n          <Card>\n            <Card.Header>\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n                Trades\n              </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"1\">\n              <Card.Body>\n                <Table striped bordered hover>\n                  <thead>\n                    <tr>\n                      <th>Security</th>\n                      <th>Symbol</th>\n                      <th>Exchange</th>\n                      <th>Currency</th>\n                      <th>Size</th>\n                      <th>Direction</th>\n                      <th>Price</th>\n                      <th>Trade Time</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    \n                      {trades.map((item,key)=>(\n                        <tr key ={key}>\n                          <td>{item.security}</td>\n                          <td>{item.symbol}</td>\n                          <td>{item.exchange}</td>\n                          <td>{item.ccy}</td>\n                          <td>{item.size}</td>\n                          <td>{item.direction}</td>\n                          <td>{item.tradedprice}</td>\n                          <td>{item.time}</td>\n                        </tr>\n                        ))}\n                    \n                  </tbody>\n                </Table>\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n        \n          \n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      </Form>\n    </>\n  );\n}\n\n\nexport default AlgoDetailsModal;\n"]},"metadata":{},"sourceType":"module"}