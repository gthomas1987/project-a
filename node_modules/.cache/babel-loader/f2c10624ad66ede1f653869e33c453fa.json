{"ast":null,"code":"import _slicedToArray from \"/Users/george/Documents/George/project-a/project-a/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/george/Documents/George/project-a/project-a/src/components/AlgoDetailsModal.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Modal, Button, Form } from 'react-bootstrap';\n\nfunction AlgoDetailsModal(props) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        show = _useState2[0],\n        setShow = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        positions = _useState4[0],\n        setPositions = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        trades = _useState6[0],\n        setTrades = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        refresh = _useState8[0],\n        setRefresh = _useState8[1];\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const handleRefresh = () => {\n    setRefresh(!{\n      refresh\n    }.refresh);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = {\n          \"algoname\": props.name\n        };\n        await fetch('http://localhost:5000/getalgodetails', {\n          method: 'POST',\n          // or 'PUT'\n          body: JSON.stringify(data),\n          // data can be `string` or {object}!\n          mode: 'no-cors',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(response => response.json()).then(data => {\n          console.log(data);\n          setPositions(data.positions);\n          setTrades(data.trades);\n        });\n      } catch (error) {}\n    };\n  }, [props.name]);\n  return React.createElement(React.Fragment, null, React.createElement(Button, {\n    variant: \"primary\",\n    onClick: handleShow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Details\"), React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(Modal, {\n    show: show,\n    onHide: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Modal.Header, {\n    closeButton: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Modal.Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, props.name)), React.createElement(Modal.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(Modal.Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"secondary\",\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Close\")))));\n}\n\nexport default AlgoDetailsModal;","map":{"version":3,"sources":["/Users/george/Documents/George/project-a/project-a/src/components/AlgoDetailsModal.js"],"names":["React","useState","useEffect","Modal","Button","Form","AlgoDetailsModal","props","show","setShow","positions","setPositions","trades","setTrades","refresh","setRefresh","handleClose","handleShow","handleRefresh","fetchData","data","name","fetch","method","body","JSON","stringify","mode","headers","then","response","json","console","log","error"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,SAAQC,KAAR,EAAcC,MAAd,EAAqBC,IAArB,QAAgC,iBAAhC;;AAEA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAAA,oBAEPN,QAAQ,CAAC,KAAD,CAFD;AAAA;AAAA,QAExBO,IAFwB;AAAA,QAElBC,OAFkB;;AAAA,qBAGGR,QAAQ,CAAC,EAAD,CAHX;AAAA;AAAA,QAGxBS,SAHwB;AAAA,QAGbC,YAHa;;AAAA,qBAIHV,QAAQ,CAAC,EAAD,CAJL;AAAA;AAAA,QAIxBW,MAJwB;AAAA,QAIhBC,SAJgB;;AAAA,qBAKFZ,QAAQ,CAAC,KAAD,CALN;AAAA;AAAA,QAKxBa,OALwB;AAAA,QAKhBC,UALgB;;AAS/B,QAAMC,WAAW,GAAG,MAAMP,OAAO,CAAC,KAAD,CAAjC;;AACA,QAAMQ,UAAU,GAAG,MAAMR,OAAO,CAAC,IAAD,CAAhC;;AAEA,QAAMS,aAAa,GAAG,MAAM;AAC1BH,IAAAA,UAAU,CAAC,CAAC;AAACD,MAAAA;AAAD,MAAUA,OAAZ,CAAV;AACD,GAFD;;AAIAZ,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMiB,SAAS,GAAG,YAAW;AAC3B,UAAI;AACF,cAAMC,IAAI,GAAG;AAAC,sBAAWb,KAAK,CAACc;AAAlB,SAAb;AACA,cAAMC,KAAK,CAAC,sCAAD,EAAyC;AAClDC,UAAAA,MAAM,EAAE,MAD0C;AAClC;AAChBC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAF4C;AAEtB;AAC5BO,UAAAA,IAAI,EAAC,SAH6C;AAIlDC,UAAAA,OAAO,EAAE;AACP,4BAAgB;AADT;AAJyC,SAAzC,CAAL,CAQLC,IARK,CAQAC,QAAQ,IAAEA,QAAQ,CAACC,IAAT,EARV,EASLF,IATK,CASAT,IAAI,IAAE;AACVY,UAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AACAT,UAAAA,YAAY,CAACS,IAAI,CAACV,SAAN,CAAZ;AACAG,UAAAA,SAAS,CAACO,IAAI,CAACR,MAAN,CAAT;AACD,SAbK,CAAN;AAcD,OAhBD,CAgBE,OAAOsB,KAAP,EAAc,CACf;AACF,KAnBD;AAoBD,GArBQ,EAqBP,CAAC3B,KAAK,CAACc,IAAP,CArBO,CAAT;AA2BA,SACE,0CACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,SAAhB;AAA0B,IAAA,OAAO,EAAEJ,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAIE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAET,IAAb;AAAmB,IAAA,MAAM,EAAEQ,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,WAAW,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD,CAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcT,KAAK,CAACc,IAApB,CADF,CADF,EAIE,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EASE,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,OAAO,EAAEL,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CATF,CADA,CAJF,CADF;AAwBD;;AAGD,eAAeV,gBAAf","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport {Modal,Button,Form} from 'react-bootstrap'\n\nfunction AlgoDetailsModal(props) {\n  \n  const [show, setShow] = useState(false);\n  const [positions, setPositions] = useState([]);\n  const [trades, setTrades] = useState([]);\n  const [refresh,setRefresh] = useState(false);\n\n  \n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const handleRefresh = () => {\n    setRefresh(!{refresh}.refresh);\n  }\n\n  useEffect(()=>{\n    const fetchData = async() => {\n      try {\n        const data = {\"algoname\":props.name}\n        await fetch('http://localhost:5000/getalgodetails', {\n          method: 'POST', // or 'PUT'\n          body: JSON.stringify(data), // data can be `string` or {object}!\n          mode:'no-cors',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        })\n        .then(response=>response.json())\n        .then(data=>{\n          console.log(data)\n          setPositions(data.positions)\n          setTrades(data.trades)\n        })\n      } catch (error) {\n      }\n    }\n  },[props.name]);\n  \n  \n  \n\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={handleShow}>\n        Details\n      </Button>\n      <Form>\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>{props.name}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          \n          \n          \n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      </Form>\n    </>\n  );\n}\n\n\nexport default AlgoDetailsModal;\n"]},"metadata":{},"sourceType":"module"}