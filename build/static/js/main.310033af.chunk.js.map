{"version":3,"sources":["components/NavigBar.js","components/Positions.js","components/Dashboard.js","components/Login.js","components/LoaderButton.js","components/Signup.js","libs/hooksLib.js","components/About.js","components/Algos.js","App.js","serviceWorker.js","config.js","index.js"],"names":["NavigBar","Navbar","bg","variant","Brand","Nav","className","Link","href","Positions","Dashboard","Login","LoaderButton","isLoading","disabled","props","Button","Spinner","animation","children","Signup","initialState","useState","fields","setValues","event","target","id","value","useFormFields","email","password","confirmPassword","confirmationCode","handleFieldChange","newUser","setNewUser","setIsLoading","handleSubmit","a","async","preventDefault","Auth","signUp","username","alert","message","handleConfirmationSubmit","confirmSignUp","signIn","userHasAuthenticated","history","push","Container","Row","Col","onSubmit","FormGroup","controlId","bsSize","FormLabel","FormControl","autoFocus","type","onChange","block","length","FormText","About","Algos","App","exact","path","component","Boolean","window","location","hostname","match","REGION","URL","USER_POOL_ID","APP_CLIENT_ID","IDENTITY_POOL_ID","Amplify","configure","mandatorySignIn","region","config","userPoolId","identityPoolId","userPoolWebClientId","API","endpoints","name","endpoint","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAqBeA,MAlBf,WACE,OACE,6BACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,QAAQ,SACzB,kBAACF,EAAA,EAAOG,MAAR,mBACA,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUC,KAAK,KAAf,aACA,kBAACH,EAAA,EAAIE,KAAL,CAAUC,KAAK,UAAf,SACA,kBAACH,EAAA,EAAIE,KAAL,CAAUC,KAAK,UAAf,UAEF,kBAACH,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUC,KAAK,KAAf,c,mCC0CGC,I,qECmBAC,I,QChBAC,I,sDCvDA,SAASC,EAAT,GAKX,IAJFC,EAIC,EAJDA,UAIC,IAHDP,iBAGC,MAHW,GAGX,MAFDQ,gBAEC,SADEC,EACF,oDACD,OACE,kBAACC,EAAA,EAAD,eACEV,UAAS,uBAAkBA,GAC3BQ,SAAUA,GAAYD,GAClBE,GAEHF,GAAa,kBAACI,EAAA,EAAD,CAASC,UAAU,WAChCH,EAAMI,U,qBCDE,SAASC,EAAOL,GAAQ,IAAD,ECd/B,SAAuBM,GAAe,IAAD,EACdC,mBAASD,GADK,mBACnCE,EADmC,KAC3BC,EAD2B,KAG1C,MAAO,CACLD,EACA,SAASE,GACPD,EAAU,eACLD,EADI,eAENE,EAAMC,OAAOC,GAAKF,EAAMC,OAAOE,WDOFC,CAAc,CAChDC,MAAO,GACPC,SAAU,GACVC,gBAAiB,GACjBC,iBAAkB,KALgB,mBAC7BV,EAD6B,KACrBW,EADqB,OAONZ,mBAAS,MAPH,mBAO7Ba,EAP6B,KAOpBC,EAPoB,OAQFd,oBAAS,GARP,mBAQ7BT,EAR6B,KAQlBwB,EARkB,KAsBpC,SAAeC,EAAab,GAA5B,eAAAc,EAAAC,OAAA,uDACEf,EAAMgB,iBAENJ,GAAa,GAHf,oBAAAE,EAAA,MAM0BG,IAAKC,OAAO,CAChCC,SAAUrB,EAAOO,MACjBC,SAAUR,EAAOQ,YARvB,OAMUI,EANV,OAUIE,GAAa,GACbD,EAAWD,GAXf,kDAaIU,MAAM,KAAEC,SACRT,GAAa,GAdjB,yDAkBA,SAAeU,EAAyBtB,GAAxC,SAAAc,EAAAC,OAAA,uDACEf,EAAMgB,iBAENJ,GAAa,GAHf,oBAAAE,EAAA,MAMUG,IAAKM,cAAczB,EAAOO,MAAOP,EAAOU,mBANlD,yBAAAM,EAAA,MAOUG,IAAKO,OAAO1B,EAAOO,MAAOP,EAAOQ,WAP3C,OASIhB,EAAMmC,sBAAqB,GAC3BnC,EAAMoC,QAAQC,KAAK,KAVvB,kDAYIP,MAAM,KAAEC,SACRT,GAAa,GAbjB,yDA4FA,OACE,yBAAK/B,UAAU,UACA,OAAZ6B,EAjDC,kBAACkB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,KACI,0BAAMC,SAAUlB,GACZ,kBAACmB,EAAA,EAAD,CAAWC,UAAU,QAAQC,OAAO,SACpC,kBAACC,EAAA,EAAD,cACA,kBAACC,EAAA,EAAD,CACIC,WAAS,EACTC,KAAK,QACLnC,MAAOL,EAAOO,MACdkC,SAAU9B,KAGd,kBAACuB,EAAA,EAAD,CAAWC,UAAU,WAAWC,OAAO,SACvC,kBAACC,EAAA,EAAD,iBACA,kBAACC,EAAA,EAAD,CACIE,KAAK,WACLnC,MAAOL,EAAOQ,SACdiC,SAAU9B,KAGd,kBAACuB,EAAA,EAAD,CAAWC,UAAU,kBAAkBC,OAAO,SAC9C,kBAACC,EAAA,EAAD,yBACA,kBAACC,EAAA,EAAD,CACIE,KAAK,WACLC,SAAU9B,EACVN,MAAOL,EAAOS,mBAGlB,kBAACpB,EAAD,CACAqD,OAAK,EACLF,KAAK,SACLJ,OAAO,QACP9C,UAAWA,EACXC,WA5GlBS,EAAOO,MAAMoC,OAAS,GACtB3C,EAAOQ,SAASmC,OAAS,GACzB3C,EAAOQ,WAAaR,EAAOS,kBAqGT,YAWZ,kBAACuB,EAAA,EAAD,QAnEN,0BAAMC,SAAUT,GACd,kBAACU,EAAA,EAAD,CAAWC,UAAU,mBAAmBC,OAAO,SAC7C,kBAACC,EAAA,EAAD,0BACA,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,KAAK,MACLC,SAAU9B,EACVN,MAAOL,EAAOU,mBAEhB,kBAACkC,EAAA,EAAD,+CAEF,kBAACvD,EAAD,CACEqD,OAAK,EACLF,KAAK,SACLJ,OAAO,QACP9C,UAAWA,EACXC,WAxDCS,EAAOU,iBAAiBiC,OAAS,IAmDpC,YE5EOE,MARf,WACE,OACE,6BACI,wDCKOC,MARf,WACE,OACE,6BACI,wDCsBOC,MAjBf,WAAgB,IAAD,EACmChD,oBAAS,GAD5C,mBAGb,OAHa,UAIX,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiD,OAAK,EAACC,KAAK,IAAIC,UAAWrD,IACjC,kBAAC,IAAD,CAAOoD,KAAK,SAASC,UAAWJ,IAChC,kBAAC,IAAD,CAAOG,KAAK,SAASC,UAAWL,QCRtBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WClBS,EACC,CACVC,OAAQ,0BACRC,IAAK,wBAHI,EAKF,CACPD,OAAQ,YACRE,aAAc,sBACdC,cAAe,4BACfC,iBAAkB,kDCAxBC,IAAQC,UAAU,CACd3C,KAAM,CACJ4C,iBAAiB,EACjBC,OAAQC,EAAeT,OACvBU,WAAYD,EAAeP,aAC3BS,eAAgBF,EAAeL,iBAC/BQ,oBAAqBH,EAAeN,eAEtCU,IAAK,CACHC,UAAW,CACT,CACEC,KAAM,QACNC,SAAUP,EAAkBR,IAC5BO,OAAQC,EAAkBT,YAMpCiB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SFuG3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.310033af.chunk.js","sourcesContent":["import React from 'react';\nimport {Navbar,Nav} from 'react-bootstrap';\n\nfunction NavigBar() {\n  return (\n    <div>\n        <Navbar bg=\"light\" variant=\"light\">\n          <Navbar.Brand>Algo Storm</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/\">Dashboard</Nav.Link>\n            <Nav.Link href=\"/algos\">Algos</Nav.Link>\n            <Nav.Link href=\"/about\">About</Nav.Link>\n          </Nav>\n          <Nav className=\"ml-auto\">\n            <Nav.Link href=\"/\">Logout</Nav.Link>\n          </Nav>\n        </Navbar>\n    </div>\n  );\n}\n\nexport default NavigBar;\n","import React,{useState,useEffect} from 'react';\nimport {Table,Button} from 'react-bootstrap';\n\nfunction Positions(props) {\n  const [people,setPeople] = useState([]);\n\n  useEffect(()=>{\n    fetchData();\n  },[]);\n\n  const fetchData = async() => {\n    fetch('https://swapi.co/api/people/?page=1')\n      .then(response=>response.json())\n      .then(data=>{\n        console.log(data.results)\n        setPeople(data.results)\n      })\n  }\n\n  \n\n  return (\n    <div>\n        \n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Height</th>\n              <th>Mass</th>\n              <th>Skin Color</th>\n              <th>Modify</th>\n            </tr>\n          </thead>\n          <tbody>\n            \n              {people.map((item,key)=>(\n                <tr key ={key}>\n                  <td>{item.name}</td>\n                  <td>{item.height}</td>\n                  <td>{item.mass}</td>\n                  <td>{item.skin_color}</td>\n                  <td>\n                    <Button>Add</Button>\n                    <span>    </span>\n                    <Button>Withdraw</Button>\n                  </td>\n                </tr>\n                ))}\n            \n          </tbody>\n        </Table>\n    </div>\n  );\n}\n\nexport default Positions;\n","import React,{useState,useEffect} from 'react';\nimport Positions from './Positions'\nimport {Container,Row,Col,Accordion, Button, Card} from 'react-bootstrap';\nimport PositionChart from './PositionChart'\nimport Summary from './Summary'\nimport CurrentAlgos from './CurrentAlgos'\n\nfunction Dashboard() {\n  const [summary,setSummary] = useState([]);\n  const [npvX,setNpvX] = useState([]);\n  const [npvY,setNpvY] = useState([]);\n\n  useEffect(()=>{\n    fetchData();\n  },[]);\n\n  \n  const fetchData = async() => {\n    fetch('http://localhost:5000/getsummary')\n      .then(response=>response.json())\n      .then(data=>{\n        console.log(data)\n        setSummary(data)\n        setNpvX(Object.keys(data.npvchart))\n        setNpvY(Object.values(data.npvchart))\n      })\n  }\n  return (\n    \n    <Container>\n      <br></br>\n      <br></br>\n      <Row>\n        <Col><Summary summary={summary}/></Col>\n        <Col><PositionChart x={npvX} y={npvY}/></Col>\n        \n      </Row>\n      <br></br>\n      <Accordion defaultActiveKey=\"0\">\n        <Card>\n          <Card.Header>\n            \n            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n              Algos\n            </Accordion.Toggle>\n          </Card.Header>\n          <Accordion.Collapse eventKey=\"0\">\n            <Card.Body><CurrentAlgos summary={summary}/></Card.Body>\n          </Accordion.Collapse>\n        </Card>\n        <Card>\n          <Card.Header>\n            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n              Current Positions\n            </Accordion.Toggle>\n          </Card.Header>\n          <Accordion.Collapse eventKey=\"1\">\n            <Card.Body><Positions /></Card.Body>\n          </Accordion.Collapse>\n        </Card>\n        <Card>\n          <Card.Header>\n            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n              Trade History\n            </Accordion.Toggle>\n          </Card.Header>\n          <Accordion.Collapse eventKey=\"2\">\n            <Card.Body><Positions /></Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    </Container>\n  );\n}\n\nexport default Dashboard;\n","import React,{useState} from 'react';\nimport {Form,Button,Container,Row,Col} from 'react-bootstrap';\nimport { Auth } from \"aws-amplify\";\n\n\nfunction Login(props) {\n  const [email,setEmail] = useState(\"\");\n  const [password,setPassword] = useState(\"\");\n\n  function validateForm() {\n    return email.length > 0 && password.length > 0;\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n  \n    try {\n      await Auth.signIn(email, password);\n      alert(\"Logged in\");\n    } catch (e) {\n      alert(e.message);\n    }\n  }\n  \n  \n  return (\n    <Container>\n      <br></br>\n      <br></br>\n      <br></br>\n      <Row>\n        <Col></Col>\n        <Col>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Label>Email address</Form.Label>\n              <Form.Control autoFocus value={email} type=\"email\" placeholder=\"Enter email\" onChange={e => setEmail(e.target.value)}/>\n              <Form.Text className=\"text-muted\">\n                We'll never share your email with anyone else.\n              </Form.Text>\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control value={password} type=\"password\" placeholder=\"Password\" onChange={e => setPassword(e.target.value)}/>\n            </Form.Group>\n            <br></br>\n            <Button  disabled={!validateForm()} variant=\"primary\" type=\"submit\">\n              Submit\n            </Button>\n          </Form>\n        </Col>\n        <Col></Col>\n      </Row>\n    </Container>\n   \n  );\n}\n\nexport default Login;\n","import React from \"react\";\nimport { Button, Spinner } from \"react-bootstrap\";\n\n\nexport default function LoaderButton({\n  isLoading,\n  className = \"\",\n  disabled = false,\n  ...props\n}) {\n  return (\n    <Button\n      className={`LoaderButton ${className}`}\n      disabled={disabled || isLoading}\n      {...props}\n    >\n      {isLoading && <Spinner animation=\"border\" />}\n      {props.children}\n    </Button>\n  );\n}","import React, { useState } from \"react\";\nimport {\n  HelpBlock,\n  FormGroup,\n  FormControl,\n  ControlLabel,\n  FormLabel,\n  FormText,\n  Container,\n  Col,\n  Row\n} from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport { useFormFields } from \"../libs/hooksLib\";\nimport {Auth} from 'aws-amplify';\n\nexport default function Signup(props) {\n  const [fields, handleFieldChange] = useFormFields({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    confirmationCode: \"\"\n  });\n  const [newUser, setNewUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  function validateForm() {\n    return (\n      fields.email.length > 0 &&\n      fields.password.length > 0 &&\n      fields.password === fields.confirmPassword\n    );\n  }\n\n  function validateConfirmationForm() {\n    return fields.confirmationCode.length > 0;\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n  \n    setIsLoading(true);\n  \n    try {\n      const newUser = await Auth.signUp({\n        username: fields.email,\n        password: fields.password\n      });\n      setIsLoading(false);\n      setNewUser(newUser);\n    } catch (e) {\n      alert(e.message);\n      setIsLoading(false);\n    }\n  }\n\n  async function handleConfirmationSubmit(event) {\n    event.preventDefault();\n  \n    setIsLoading(true);\n  \n    try {\n      await Auth.confirmSignUp(fields.email, fields.confirmationCode);\n      await Auth.signIn(fields.email, fields.password);\n  \n      props.userHasAuthenticated(true);\n      props.history.push(\"/\");\n    } catch (e) {\n      alert(e.message);\n      setIsLoading(false);\n    }\n  }\n\n  function renderConfirmationForm() {\n    return (\n      <form onSubmit={handleConfirmationSubmit}>\n        <FormGroup controlId=\"confirmationCode\" bsSize=\"large\">\n          <FormLabel>Confirmation Code</FormLabel>\n          <FormControl\n            autoFocus\n            type=\"tel\"\n            onChange={handleFieldChange}\n            value={fields.confirmationCode}\n          />\n          <FormText>Please check your email for the code.</FormText >\n        </FormGroup>\n        <LoaderButton\n          block\n          type=\"submit\"\n          bsSize=\"large\"\n          isLoading={isLoading}\n          disabled={!validateConfirmationForm()}\n        >\n          Verify\n        </LoaderButton>\n      </form>\n    );\n  }\n\n  function renderForm() {\n    return (\n        <Container>\n            <Row>\n                <Col></Col>\n                <Col>\n                    <form onSubmit={handleSubmit}>\n                        <FormGroup controlId=\"email\" bsSize=\"large\">\n                        <FormLabel>Email</FormLabel>\n                        <FormControl\n                            autoFocus\n                            type=\"email\"\n                            value={fields.email}\n                            onChange={handleFieldChange}\n                        />\n                        </FormGroup>\n                        <FormGroup controlId=\"password\" bsSize=\"large\">\n                        <FormLabel>Password</FormLabel>\n                        <FormControl\n                            type=\"password\"\n                            value={fields.password}\n                            onChange={handleFieldChange}\n                        />\n                        </FormGroup>\n                        <FormGroup controlId=\"confirmPassword\" bsSize=\"large\">\n                        <FormLabel>Confirm Password</FormLabel>\n                        <FormControl\n                            type=\"password\"\n                            onChange={handleFieldChange}\n                            value={fields.confirmPassword}\n                        />\n                        </FormGroup>\n                        <LoaderButton\n                        block\n                        type=\"submit\"\n                        bsSize=\"large\"\n                        isLoading={isLoading}\n                        disabled={!validateForm()}\n                        >\n                        Signup\n                        </LoaderButton>\n                    </form>\n            </Col>\n            <Col></Col>\n            </Row>\n      </Container>\n    );\n  }\n\n  return (\n    <div className=\"Signup\">\n      {newUser === null ? renderForm() : renderConfirmationForm()}\n    </div>\n  );\n}","import { useState } from \"react\";\n\nexport function useFormFields(initialState) {\n  const [fields, setValues] = useState(initialState);\n\n  return [\n    fields,\n    function(event) {\n      setValues({\n        ...fields,\n        [event.target.id]: event.target.value\n      });\n    }\n  ];\n}","import React from 'react';\n\nfunction About() {\n  return (\n    <div>\n        <h1>This is the About Page</h1>\n    </div>\n  );\n}\n\nexport default About;\n","import React from 'react';\n\nfunction Algos() {\n  return (\n    <div>\n        <h1>This is the Algos Page</h1>\n    </div>\n  );\n}\n\nexport default Algos;\n","import React,{useState} from 'react';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\nimport NavigBar from './components/NavigBar';\nimport Home from './components/Dashboard';\nimport Login from './components/Login';\nimport Signup from './components/Signup';\nimport About from './components/About';\nimport Algos from './components/Algos';\n\n\nfunction App() {\n  const [isAuthenticated, userHasAuthenticated] = useState(false);\n\n  return (\n    <div>\n      <NavigBar />\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Signup} />\n          <Route path=\"/algos\" component={Algos} />\n          <Route path=\"/about\" component={About} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default {\n    apiGateway: {\n      REGION: \"YOUR_API_GATEWAY_REGION\",\n      URL: \"YOUR_API_GATEWAY_URL\"\n    },\n    cognito: {\n      REGION: \"us-east-2\",\n      USER_POOL_ID: \"us-east-2_DYQesdYZ4\",\n      APP_CLIENT_ID: \"cka4o038sdsinm35je3f7t8hg\",\n      IDENTITY_POOL_ID: \"us-east-2:fbc70a24-f9e6-4b4b-b6f4-d0026a979922\"\n    }\n  };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Amplify from 'aws-amplify';\nimport config from './config';\n\nAmplify.configure({\n    Auth: {\n      mandatorySignIn: true,\n      region: config.cognito.REGION,\n      userPoolId: config.cognito.USER_POOL_ID,\n      identityPoolId: config.cognito.IDENTITY_POOL_ID,\n      userPoolWebClientId: config.cognito.APP_CLIENT_ID\n    },\n    API: {\n      endpoints: [\n        {\n          name: \"notes\",\n          endpoint: config.apiGateway.URL,\n          region: config.apiGateway.REGION\n        },\n      ]\n    }\n  });\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}